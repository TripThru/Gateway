@using System.CodeDom
@using ServiceStack.Common
@inherits ServiceStack.Razor.ViewPage<ServiceStack.TripThruGateway.GatewayService.StatsResponse>
<html>

<head>
    <title>Tripthru</title>
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
    <script type="text/javascript" src="http://code.highcharts.com/highcharts.js"></script>
    <script type="text/javascript" src="http://code.highcharts.com/highcharts-more.js"></script>
    <script type="text/javascript" src="Scripts/jquery.easing.1.3.js"></script>
    <script type="text/javascript" src="Scripts/jquery.flipCounter.1.2.pack.js"></script>
    <link href="Scripts/prism.css" rel="stylesheet" />
    <script type="text/javascript" src="Scripts/prism.js"></script>
</head>


<body>

    <style>
        body {
            font-family: 'Open Sans',sans-serif;
            background: #f8f8f8;
            color: #525252;
            font-size: 15px;
            font-weight: 300;
        }

        h1 {
            font-weight: 300;
            color: #525252;
            margin: 0 0 20px 0;
        }

        h2 {
            font-weight: 100;
            color: #525252;
            margin: 0 0 20px 0;
        }

        /*HEADER STYLE*/
        .logo {
            float: left;
            margin: 12px 55px 11px 11px;
        }

            .logo a {
                float: left;
            }

        #head_nav {
            float: left;
            margin: 31px 0px;
            padding: 0px;
            list-style: none;
        }

            #head_nav li {
                float: left;
                margin: 0px;
                padding: 0px 10px;
            }

                #head_nav li.last {
                    border-right: none;
                }

                #head_nav li a {
                    float: left;
                    text-decoration: none;
                    color: #727272;
                }

                    #head_nav li a:hover, #head_nav li a.active {
                        color: #0087bc;
                    }

        #header_out {
            width: 100%;
            height: 72px;
            background: #FFF;
            font-size: 0.85em;
            border-bottom: 1px solid #E3E3E3;
        }

        #header {
            width: 95%;
            height: 70px;
            margin: 0px auto;
        }
        /*HEADER STYLE*/

        #main_container {
            position: absolute;
            left: 0;
            width: 100%;
            display: block;
        }

        /*CHARTS STYLE*/

        .box_container {
            width: 98%;
            margin-top: 10px;
        }

        .left_container {
            width: 340px;
            float: left;
        }

        .right_container {
            width: 425px;
            float: right;
        }

        .middle_container {
            overflow: hidden;
        }

        .box_container_title {
            width: 100%;
            text-align: center;
            font-size: 16px;
            padding-top: 10px;
            font-weight: bold;
        }

        .box_container_subtitle {
            width: 100%;
            text-align: center;
            font-size: 12px;
            padding-top: 10px;
        }

        #counters_main_container {
            float: right;
            display: block;
            overflow: hidden;
            width: 200px;
            height: 612px;
        }

        .counters_container {
            background: #fff;
            width: 90%;
            height: 192px;
            text-align: center;
            display: inline-block;
            border: 1px solid #DEDEDE;
            margin-top: 10px;
            margin-left: 5px;
        }

        .counter {
            margin-top: 5px;
        }

        .chart_container {
            height: 600px;
            width: 200px;
            background: #FFF;
            float: right;
            display: block;
            margin-top: 10px;
            margin-left: 5px;
            margin-right: 10px;
            border: 1px solid #DEDEDE;
        }

        #stats {
            height: 570px;
            width: 99%;
            background: #FFF;
            float: left;
            display: block;
        }

        .map_container {
            height: 600px;
            width: 98%;
            background: #FFF;
            margin-top: 10px;
            float: left;
            border: 1px solid #DEDEDE;
        }

        #map-canvas {
            width: 93%;
            height: 415px;
            margin: 0 auto;
        }

        .tracking-map {
            width: 93%;
            height: 415px;
            border: 1px solid #eee;
            margin: 0 auto;
            margin-top: 10px;
            background: #EBEBEB;
        }

        #trip_gauges_container {
            width: 95%;
            height: 220px;
            background: #FFF;
            float: left;
            display: block;
            margin: 0 auto;
            border-bottom: 1px solid #DEDEDE;
        }

        .trip_gauge {
            width: 175px;
            height: 180px;
            background: #FFF;
            margin-left: 70px;
            float: left;
            display: block;
        }

        #triplog_container {
            height: 600px;
            width: 325px;
            background: #FFF;
            text-align: center;
            display: inline-block;
            overflow: auto;
            float: left;
            margin-top: 10px;
            margin-left: 10px;
            border: 1px solid #DEDEDE;
        }

        #triplog_trips {
        }

        #triplog_selector {
            width: 100%;
        }

            #triplog_selector select {
                width: 100%;
                height: 21px;
                font-size: 16px;
                border: 0px;
                border-bottom: 1px solid #DEDEDE;
            }

        .trip {
            height: 65px;
            width: 100%;
            border-bottom: 1px dotted rgba(0, 0, 0, 0.5);
            border-bottom: 1px solid rgba(0, 0, 0, 0.2);
            border-bottom: 1px dotted #eee;
            border-bottom: 1px solid #ccc;
            background: #FFF;
            text-align: left;
            font-size: 11px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

            .trip p {
                margin: 2px;
                padding: 0;
            }

            .trip h2 {
                margin: 0px;
                padding: 0;
                font-size: 13px;
                font-weight: bold;
            }

            .trip:hover {
                background: #F5F5F5;
            }

        .activeTrip {
            background: #E0E0E0;
        }

        #triplogs_container {
            min-height: 300px;
            width: 100%;
            background: #FFF;
            float: left;
            display: block;
            margin: 10px;
            border: 1px solid #DEDEDE;
        }


        .triplog {
            height: 40px;
            width: 100%;
            border-bottom: 1px dotted rgba(0, 0, 0, 0.5);
            border-bottom: 1px solid rgba(0, 0, 0, 0.2);
            border-bottom: 1px dotted #eee;
            border-bottom: 1px solid #ccc;
            background: #FFF;
            text-align: left;
            font-size: 11px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

            .triplog p {
                margin: 2px;
                padding: 0;
            }

            .triplog h2 {
                margin: 0px;
                padding: 0;
                font-size: 13px;
                font-weight: bold;
            }

        #trip-info {
            margin-top: 10px;
            margin-bottom: 10px;
            text-indent: 15px;
            font-size: 12px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

            #trip-info p {
                margin: 0px;
                padding: 0;
            }

            #trip-info div {
                float: left;
            }

        /*CHARTS STYLE*/

        /*LOG STYLE*/

        ul {
            list-style-type: none;
            padding: 0;
            margin: 0;
            word-wrap: break-word;
        }

        li {
            font-weight: 300;
            padding-left: 1.5em;
            word-wrap: break-word;
        }

        .request_list {
            word-wrap: break-word;
        }

        .request_block {
            padding-left: 0em;
            border: 1px solid #eee;
            background: white;
            font-weight: bold;
            margin: 0 auto;
            margin-top: 0.5em;
            margin-bottom: 0.5em;
            font-size: 14px;
            word-wrap: break-word;
            width: 97%;
        }

        .handle {
            background: transparent url(/images/books/jquery-1-7/spacer.png);
            background-repeat: no-repeat;
            background-position: center bottom;
            display: block;
            float: left;
            width: 10px;
            height: 11px;
        }

        .collapsed {
            background: transparent url(content/images/arrow_collapsed.gif);
            background-repeat: no-repeat;
            background-position: center;
            cursor: pointer;
        }

        .expanded {
            background: transparent url(content/images/arrow_expanded.gif);
            background-repeat: no-repeat;
            background-position: center;
            cursor: pointer;
        }

        pre {
            width: 97%;
            font-size: 13px;
            border: 1px solid #DEDEDE;
            background: #fff !important;
        }

        code {
            background: #fff;
        }

        /*LOG STYLE*/
    </style>
    <div id="header_out">
        <div id="header">
            <div class="logo">
                <img src="content/images/Logo.png" border="0" /></div>
            <ul id="head_nav">
                <li><a class="active" href="#">Stats</a></li>
                <li><a href="log">Log</a></li>
            </ul>
        </div>
    </div>
    <div id="main_container">
        <div class="left_container">
            <div id="triplog_container" style="float: left;" class="draggable">
                <div id="trip_gauges_container">
                    <div class="box_container_title">
                        Active trips
                    </div>
                    <div id="activeTripsChart" class="trip_gauge"></div>
                </div>
                <div id="triplog_selector" style="margin-bottom: 10px;">
                    <select>
                        <option value="All" selected="selected">All</option>
                        <option value="Queued">Queued</option>
                        <option value="Dispatched">Dispatched</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Enroute">Enroute</option>
                        <option value="ArrivedAndWaiting">ArrivedAndWaiting</option>
                        <option value="PickedUp">Picked up</option>
                        <option value="DroppedOff">DroppedOff</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Rejected">Rejected</option>
                        <option value="Complete">Complete</option>
                    </select>
                </div>
                <div style="display: none; margin-top: 10px;" id="loadingTripsContainer">
                    <img src='content/images/loading.gif' width='24' height='24' />
                </div>
                <div style="display: none; margin-top: 10px;" id="noTrips">No active trips found</div>
                <div id="triplog_trips"></div>
            </div>
        </div>
        <div class="right_container">
            <div class="chart_container draggable">
                <div class="box_container_title">
                    Trip stats
                </div>
                <div id="stats"></div>
            </div>
            <div id="counters_main_container">
                <div style="margin-left: 10px;" class="counters_container draggable">
                    <div class="box_container_title">Requests</div>
                    <div class="box_container_subtitle">Last hour</div>
                    <div class="counter" id="requestsLastHour">
                        <input type="hidden" name="counter-value" value="0" /></div>
                    <div class="box_container_subtitle">Last 24 hours</div>
                    <div class="counter" id="requestsLast24Hrs">
                        <input type="hidden" name="counter-value" value="0" /></div>
                    <div class="box_container_subtitle">All time</div>
                    <div class="counter" id="requestsAllTime">
                        <input type="hidden" name="counter-value" value="0" /></div>
                </div>
                <div style="margin-left: 10px;" class="counters_container draggable">
                    <div class="box_container_title">Distance</div>
                    <div class="box_container_subtitle">Last hour</div>
                    <div class="counter" id="distanceLastHour">
                        <input type="hidden" name="counter-value" value="0" /></div>
                    <div class="box_container_subtitle">Last 24 hours</div>
                    <div class="counter" id="distanceLast24Hrs">
                        <input type="hidden" name="counter-value" value="0" /></div>
                    <div class="box_container_subtitle">All time</div>
                    <div class="counter" id="distanceAllTime">
                        <input type="hidden" name="counter-value" value="0" /></div>
                </div>
                <div style="margin-left: 10px;" class="counters_container draggable">
                    <div class="box_container_title">Fare</div>
                    <div class="box_container_subtitle">Last hour</div>
                    <div class="counter" id="fareLastHour">
                        <input type="hidden" name="counter-value" value="0" /></div>
                    <div class="box_container_subtitle">Last 24 hours</div>
                    <div class="counter" id="fareLast24Hrs">
                        <input type="hidden" name="counter-value" value="0" /></div>
                    <div class="box_container_subtitle">All time</div>
                    <div class="counter" id="fareAllTime">
                        <input type="hidden" name="counter-value" value="0" /></div>
                </div>
            </div>
        </div>
        <div class="middle_container">
            <div class="map_container draggable" style="margin-left: 10px;">
                <div class="box_container_title">
                    Tracking
                    <span style="display: none;" id="updatingTripContainer">
                        <img src='content/images/loading.gif' width='12' height='12' />
                    </span>
                </div>
                <div id="trip-info">
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Passenger: </span>
                            <span id="selectedTripPassengerName" />
                        </p>
                    </div>
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Pickup time: </span>
                            <span id="selectedTripPickupTime" />
                        </p>
                    </div>
                    <br />
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Pickup: </span>
                            <span id="selectedTripPickupLocation" />
                        </p>
                    </div>
                    <br />
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Origin: </span>
                            <span id="selectedTripOriginatingPartner"></span>
                        </p>
                    </div>
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Servicing: </span>
                            <span id="selectedTripServicingPartner"></span>
                        </p>
                    </div>
                    <br />
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Status: </span>
                            <span id="selectedTripStatus">Select a trip to track</span>
                        </p>
                    </div>
                    <div>
                        <p>
                            <span style='font-weight: bold;'>ETA: </span>
                            <span id="selectedTripETA" />
                        </p>
                    </div>
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Fare: </span>$
                            <span id="selectedTripFare" />
                        </p>
                    </div>
                    <br />
                    <div>
                        <p>
                            <span style='font-weight: bold;'>Driver: </span>
                            <span id="selectedTripDriverName" />
                        </p>
                        <p>
                            <span style='font-weight: bold;'>Driver location: </span>
                            <span id="selectedTripDriverLocation" />
                        </p>
                        <p>
                            <span style='font-weight: bold;'>Drop off: </span>
                            <span id="selectedTripDropoffLocation" />
                        </p>
                    </div>
                </div>
                <div id="map-canvas" class="tracking-map"></div>
            </div>
        </div>
        <div class="box_container">
            <div id="triplogs_container">
                <div class="box_container_title" style="margin-bottom: 10px;">
                    Trip activity log
                </div>
                <div style="display: none; margin-top: 10px;" id="updatingTripLog">
                    <img src='content/images/loading.gif' width='24' height='24' />
                </div>
                <div style="display: none; margin-top: 10px;" id="noTrips">No log entries found</div>
                <div id="triplogs_logs">
                </div>
            </div>
        </div>
    </div>

    <script>
        $(document).ready(function () {
            //$(".draggable").draggable({
            //	containment: '#main_container'
            //});
            var baseUrl = "";
            var accessToken = "jaosid1201231";
            var stats = null;
            var activeTripsChart = null;
            var activeTripsCount = [];
            var activeTrips = [];
            var tripsInfo = [];
            var activeTripsInfo = {};
            var selectedStatus = $("#triplog_selector option:selected").val();
            var currentTripLogs = [];
            var counters = {
                requestsLastHour: 0,
                requestsLast24Hrs: 0,
                requestsAllTime: 0,
                distanceLastHour: 0,
                distanceLast24Hrs: 0,
                distanceAllTime: 0,
                fareLastHour: 0,
                fareLast24Hrs: 0,
                fareAllTime: 0
            };
            $("#requestsLastHour").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#requestsLast24Hrs").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#requestsAllTime").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#distanceLastHour").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#distanceLast24Hrs").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#distanceAllTime").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#fareLastHour").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#fareLast24Hrs").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });
            $("#fareAllTime").flipCounter({ imagePath: "Scripts/flipCounter-medium.png", digitHeight: 20, digitWidth: 15, number: 0 });

            var updatedTripAudio = document.createElement('audio');
            updatedTripAudio.setAttribute('src', 'http://soundfxnow.com/soundfx/quick-blip.mp3');

            $.get(baseUrl + 'stats', function (data) {
                if (data.result == "OK") {
                    stats = new Highcharts.Chart({
                        chart: {
                            renderTo: 'stats',
                            plotBackgroundColor: null,
                            plotBorderWidth: null,
                            plotShadow: false
                        },
                        exporting: { enabled: false },
                        title: {
                            text: '',
                            style: {
                                fontFamily: 'Open Sans, sans-serif',
                                color: "#727272"
                            }
                        },
                        tooltip: {
                            pointFormat: '{series.name}: <b>{point.y}</b>'
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                cursor: 'pointer',
                                dataLabels: {
                                    enabled: false
                                },
                                showInLegend: true
                            }
                        },
                        labels: {
                            items: [{
                                html: 'Last hour',
                                style: {
                                    left: '65',
                                    top: '15',
                                    color: "#727272"
                                }
                            },
                            {
                                html: 'Last 24 hours',
                                style: {
                                    left: '55',
                                    top: '150',
                                    color: "#727272"
                                }
                            },
                            {
                                html: 'All time',
                                style: {
                                    left: '70',
                                    top: '285',
                                    color: "#727272"
                                }
                            }
                            ]
                        },
                        series: [{
                            center: ['50%', '15%'],
                            size: '40%',
                            showInLegend: true,
                            type: 'pie',
                            name: 'Count',
                            data: [
                                {
                                    name: 'Completed',
                                    y: data.tripsLastHour,
                                    sliced: true,
                                    selected: true,
                                    color: '#75C944'
                                },
                                {
                                    name: 'Rejections',
                                    y: data.rejectsLastHour,
                                    color: '#282963'
                                },
                                {
                                    name: 'Cancellations',
                                    y: data.cancelsLastHour,
                                    color: '#FFED26'
                                },
                                {
                                    name: 'Exceptions',
                                    y: data.exceptionsLastHour,
                                    color: '#E35D5D'
                                }
                            ]
                        }, {
                            center: ['50%', '50%'],
                            size: '40%',
                            showInLegend: false,
                            type: 'pie',
                            name: 'Count',
                            data: [
                                {
                                    name: 'Completed',
                                    y: data.tripsLast24Hrs,
                                    sliced: true,
                                    selected: true,
                                    color: '#75C944'
                                },
                                {
                                    name: 'Rejections',
                                    y: data.rejectsLast24Hrs,
                                    color: '#282963'
                                },
                                {
                                    name: 'Cancellations',
                                    y: data.cancelsLast24Hrs,
                                    color: '#FFED26'
                                },
                                {
                                    name: 'Exceptions',
                                    y: data.exceptionsLast24Hrs,
                                    color: '#E35D5D'
                                }
                            ]
                        },
                        {
                            center: ['50%', '85%'],
                            size: '40%',
                            showInLegend: false,
                            type: 'pie',
                            name: 'Count',
                            data: [
                             {
                                 name: 'Completed',
                                 y: data.tripsAllTime,
                                 sliced: true,
                                 selected: true,
                                 color: '#75C944'
                             },
                             {
                                 name: 'Rejections',
                                 y: data.rejectsAllTime,
                                 color: '#282963'
                             },
                             {
                                 name: 'Cancellations',
                                 y: data.cancelsAllTime,
                                 color: '#FFED26'
                             },
                             {
                                 name: 'Exceptions',
                                 y: data.exceptionsAllTime,
                                 color: '#E35D5D'
                             }
                            ]
                        }
                        ]
                    }, function (chart) {
                        $(chart.series[0].data).each(function (i, e) {
                            e.legendItem.on('click', function (event) {
                                var legendItem = e.name;

                                event.stopPropagation();

                                $(chart.series).each(function (j, f) {
                                    $(this.data).each(function (k, z) {
                                        if (z.name == legendItem) {
                                            if (z.visible) {
                                                z.setVisible(false);
                                            }
                                            else {
                                                z.setVisible(true);
                                            }
                                        }
                                    });
                                });

                            });
                        });
                    });

                    activeTripsCount.push(data.activeTrips);
                    activeTripsChart = new Highcharts.Chart({
                        chart: {
                            renderTo: 'activeTripsChart',
                            type: 'gauge',
                            plotBackgroundColor: null,
                            plotBackgroundImage: null,
                            plotBorderWidth: 0,
                            plotShadow: false,
                            style: {
                                fontFamily: 'Open Sans, sans-serif',
                                color: "#727272"
                            }
                        },
                        exporting: { enabled: false },
                        title: {
                            text: '',
                            style: {
                                fontFamily: 'Open Sans, sans-serif',
                                color: "#727272"
                            }
                        },
                        pane: {
                            startAngle: -150,
                            endAngle: 150,
                            background: [{
                                backgroundColor: {
                                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                                    stops: [
                                        [0, '#FFF'],
                                        [1, '#333']
                                    ]
                                },
                                borderWidth: 0,
                                outerRadius: '109%'
                            }, {
                                backgroundColor: {
                                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
                                    stops: [
                                        [0, '#333'],
                                        [1, '#FFF']
                                    ]
                                },
                                borderWidth: 1,
                                outerRadius: '107%'
                            }, {
                                // default background
                            }, {
                                backgroundColor: '#DDD',
                                borderWidth: 0,
                                outerRadius: '105%',
                                innerRadius: '103%'
                            }]
                        },

                        // the value axis
                        yAxis: {
                            min: 0,
                            max: (data.activeTrips < 10) ? 10 : data.activeTrips * 1.4,

                            minorTickInterval: 'auto',
                            minorTickWidth: 0,
                            minorTickLength: 10,
                            minorTickPosition: 'inside',
                            minorTickColor: '#FFF',

                            tickPixelInterval: 30,
                            tickWidth: 0,
                            tickPosition: 'inside',
                            tickLength: 10,
                            tickColor: '#FFF',
                            labels: {
                                step: 2,
                                rotation: 'auto'
                            },
                            title: {
                                text: 'Trips'
                            },
                            plotBands: [{
                                from: 0,
                                to: 30,
                                color: '#55BF3B'
                            }]
                        },

                        series: [
                            {
                                name: "All trips",
                                data: [data.activeTrips],
                                dial: {
                                    radius: "50%",
                                    rearLength: "0%"
                                }
                            }, {
                                name: "Selected status",
                                data: [data.activeTrips],
                                dial: {
                                    radius: "90%",
                                    rearLength: "0%"
                                },
                                dataLabels: {
                                    enabled: false
                                }
                            }
                        ]

                    });

                    updateTrips();
                    updateCounters(data);
                    updateTripLog();
                }
            });

            function getContainerTripId(tripId) {
                return tripId.replace(new RegExp("@@", 'g'), "").replace(".", "");
            }

            $("#triplog_selector").change(function () {

                selectedStatus = $("#triplog_selector option:selected").val();
                updateTrips();
            });

            var updatingTrips = false;
            function updateTrips() {
                if (!updatingTrips) {
                    updaingTrips = true;
                    if (activeTrips.length == 0) {
                        $("#noTrips").fadeOut();
                        $("#loadingTripsContainer").fadeIn();
                    }
                    $.get(baseUrl + 'trips', function (data) {
                        if (data.result == "OK") {
                            var trips = [];
                            var selectedStatusCount = 0;
                            if (selectedStatus != 'All') {
                                data.trips.forEach(function (trip) {
                                    if (trip.status == selectedStatus) {
                                        selectedStatusCount++;
                                        trips.push(trip);
                                    }
                                });
                            } else {
                                selectedStatusCount = data.trips.length;
                                trips = data.trips;
                            }
                            if (activeTripsChart != null) {
                                activeTripsCount.push(selectedStatusCount);
                                var max = Math.max.apply(Math, activeTripsCount);
                                max = (max < 10) ? 10 : max * 1.4;
                                activeTripsChart.yAxis[0].setExtremes(0, max);
                                activeTripsChart.series[0].points[0].update(data.trips.length);
                                activeTripsChart.series[1].points[0].update(selectedStatusCount);
                            }
                            updateSelectedStatusTrips(trips);

                        }

                        if (activeTrips.length > 0) {
                            $("#loadingTripsContainer").fadeOut();
                            $("#noTrips").fadeOut();
                        } else {
                            $("#loadingTripsContainer").fadeOut();
                            $("#noTrips").fadeIn();
                        }
                        updatingTrips = false;
                    }).error(function () {
                        if (activeTrips.length > 0) {
                            $("#loadingTripsContainer").fadeOut();
                            $("#noTrips").fadeOut();
                        } else {
                            $("#loadingTripsContainer").fadeOut();
                            $("#noTrips").fadeIn();
                        }
                        updatingTrips = false;
                    });
                }
            }

            function updateSelectedStatusTrips(trips) {
                var dataTrips = [];
                trips.forEach(function (trip) {
                    dataTrips.push(trip.id);
                    if ($.inArray(trip.id, activeTrips) == -1) {
                        activeTrips.push(trip.id);
                        activeTripsInfo[trip.id] = trip;
                        var tripContainerId = getContainerTripId(trip.id);
                        $("#triplog_trips").prepend("<div style='display:none;' class='trip' id='" + tripContainerId + "'>" +
                                                            "<h2>" + trip.id + "</h2>" +
                                                            "<p><span style='font-weight: bold;'>Passenger: </span><span id='passengerName" + tripContainerId + "'>" + trip.passengerName + "</span></p>" +
                                                            "<p><span style='font-weight: bold;'>Time: </span><span id='pickupTime" + tripContainerId + "'>" + trip.pickupTime.split(".")[0] + "</span></p>" +
                                                            "<p><span style='font-weight: bold;'>Pickup: </span><span id='pickupLocation" + tripContainerId + "'>" + trip.pickupLocation.address + "</span></p>" +
                                                            "<input type='hidden' id='tripId' name='tripId' value='" + trip.id + "' />" +
                                                        "</div>"
                                                        );
                        $("#" + tripContainerId).slideDown();
                        $('#triplog_trips').on('click', "#" + tripContainerId, function () {

                            if (directionsDisplay != null) {
                                directionsDisplay.setMap(null);
                                directionsDisplay = null;
                            }
                            if (directionsDisplay2 != null) {
                                directionsDisplay2.setMap(null);
                                directionsDisplay2 = null;
                            }
                            driverPreviousLocation = null;

                            if (!$("#" + tripContainerId).hasClass("activeTrip")) {
                                $("#triplog_trips>div.activeTrip").removeClass("activeTrip");
                                $("#" + tripContainerId).toggleClass("activeTrip");
                                setTripInfo(activeTripsInfo[trip.id]);
                                updateSelectedTrip();
                                clearLogs();
                            } else {
                                $("#" + tripContainerId).toggleClass("activeTrip");
                                clearTripInfo();
                                clearLogs();
                            }
                        });


                    }
                });
                activeTrips.forEach(function (trip) {
                    if ($.inArray(trip, dataTrips) == -1) {
                        activeTrips = $.grep(activeTrips, function (value) {
                            if (value != trip) {
                                var tripId = $(".activeTrip").find("#tripId").val();
                                if (tripId === trip) {
                                    $("#selectedTripStatus").hide().html('Completed').fadeIn();
                                }
                                return true;
                            }
                            return false;
                        });
                        $("#" + getContainerTripId(trip)).slideUp().remove();
                    }
                });
            }

            var updatingSelectedTrip = false;
            var updatingTripId = "";
            function updateSelectedTrip() {
                var tripId = $(".activeTrip").find("#tripId").val();
                if (tripId && (!updatingSelectedTrip || tripId != updatingTripId)) {
                    updatedTripAudio.pause();
                    updatingSelectedTrip = true;
                    updatingTripId = tripId;
                    if (tripId) {
                        var tripContainerId = getContainerTripId(tripId);
                        $("#updatingTripContainer").fadeIn();
                        /*
                        if (tripsInfo[tripId] != null) {
                            setTripInfo(tripsInfo[tripId]);
                        }
                        */
                        $.get(baseUrl + 'tripstatus' + "?access_token=" + accessToken + "&tripid=" + tripId, function (data) {
                            if (data.result == "OK") {
                                tripsInfo[tripId].fleetId = activeTripsInfo[tripId].fleetId = data.fleetId;
                                tripsInfo[tripId].fleetId = activeTripsInfo[tripId].fleetName = data.fleetName;
                                tripsInfo[tripId].driverId = activeTripsInfo[tripId].driverId = data.driverId;
                                tripsInfo[tripId].driverName = activeTripsInfo[tripId].driverName = data.driverName;
                                tripsInfo[tripId].driverLocation = activeTripsInfo[tripId].driverLocation = data.driverLocation;
                                tripsInfo[tripId].driverInitialLocation = activeTripsInfo[tripId].driverInitialLocation = data.driverInitialLocation;
                                if (data.status != activeTripsInfo[tripId].status) {
                                    updatedTripAudio.play();
                                }
                                tripsInfo[tripId].status = activeTripsInfo[tripId].status = data.status;
                                tripsInfo[tripId].price = activeTripsInfo[tripId].price = data.price;
                                tripsInfo[tripId].distance = activeTripsInfo[tripId].distance = data.distance;
                                tripsInfo[tripId].eta = activeTripsInfo[tripId].eta = data.eta;
                                setTripInfo(activeTripsInfo[tripId]);
                                updateTripLog();
                            }
                            updatingSelectedTrip = false;
                            $("#updatingTripContainer").fadeOut();
                        }).error(function () {
                            updatingSelectedTrip = false;
                            $("#updatingTripContainer").fadeOut();
                        });
                    } else {
                        updatingSelectedTrip = false;
                    }
                }
            }


            var passengerMarker = null;
            var destinationMarker = null;
            var driverMarker = null;
            var initialMarker = null;
            var map = null;
            var mapOptions = null;
            var directionsDisplay = null;
            var directionsDisplay2 = null;
            var driverPreviousLocation = null;
            $(".tracking-map").text("Select a trip");

            function setTripInfo(trip) {
                var tripId = $(".activeTrip").find("#tripId").val();
                if (trip.id == tripId) {

                    if (driverPreviousLocation == null || trip.driverLocation.lat != driverPreviousLocation.lat || trip.driverLocation.lng != driverPreviousLocation.lng) {

                        driverPreviousLocation = trip.driverLocation;

                        var passengerName = trip.passengerName ? trip.passengerName : 'Not available';
                        var pickupTime = trip.pickupTime ? trip.pickupTime.split(".")[0] : 'Passenger waiting';
                        var status = trip.status ? trip.status : 'Not available';
                        var eta = trip.eta ? trip.eta.split(".")[0] : 'Not available';
                        var fare = trip.price ? Math.round(trip.price).toFixed(2) : 'Not available';
                        var driverName = trip.driverName ? trip.driverName : 'Not available';
                        var pickupLocationName = trip.pickupLocation ? trip.pickupLocation.address : 'Not available';
                        var dropoffLocationName = trip.dropoffLocation ? trip.dropoffLocation.address : 'Not available';
                        var driverLocationName = trip.driverLocation ? trip.driverLocation.address : "Not available";
                        var driverInitialName = trip.driverInitialLocation ? trip.driverInitialLocation.address : "Not available";
                        var originatingPartnerName = trip.originatingPartnerName ? trip.originatingPartnerName : 'Not available';
                        var servicingPartnerName = trip.servicingPartnerName ? trip.servicingPartnerName : 'Not available';

                        $("#selectedTripPassengerName").hide().html(passengerName).fadeIn();
                        $("#selectedTripPickupTime").hide().html(pickupTime).fadeIn();
                        $("#selectedTripPickupLocation").hide().html(pickupLocationName).fadeIn();
                        $("#selectedTripStatus").hide().html(status).fadeIn();
                        $("#selectedTripETA").hide().html(eta).fadeIn();
                        $("#selectedTripFare").hide().html(fare).fadeIn();
                        $("#selectedTripDropoffLocation").hide().html(dropoffLocationName).fadeIn();
                        $("#selectedTripDriverName").hide().html(driverName).fadeIn();
                        $("#selectedTripDriverLocation").hide().html(driverLocationName).fadeIn();
                        $("#selectedTripOriginatingPartner").hide().html(originatingPartnerName).fadeIn();
                        $("#selectedTripServicingPartner").hide().html(servicingPartnerName).fadeIn();


                        var pickupLocation = trip.pickupLocation;
                        var driverLocation = trip.driverLocation;
                        var dropoffLocation = trip.dropoffLocation;
                        var driverInitialLocation = trip.driverInitialLocation;

                        if (pickupLocation || driverLocation) {
                            var passengerLocation = null;
                            var driverCurrentLocation = null;
                            var destinationLocation = null;
                            var initialLocation = null;

                            if (dropoffLocation) {
                                destinationLocation = new google.maps.LatLng(dropoffLocation.lat, dropoffLocation.lng);
                                if (destinationMarker != null) {
                                    destinationMarker.setMap(map);
                                    destinationMarker.setPosition(destinationLocation);
                                }
                            }

                            if (pickupLocation) {
                                passengerLocation = new google.maps.LatLng(pickupLocation.lat, pickupLocation.lng);
                                if (passengerMarker != null) {
                                    passengerMarker.setMap(map);
                                    passengerMarker.setPosition(passengerLocation);
                                }
                            }

                            if (driverLocation) {
                                driverCurrentLocation = new google.maps.LatLng(driverLocation.lat, driverLocation.lng);
                                if (driverMarker != null) {
                                    driverMarker.setMap(map);
                                    driverMarker.setPosition(driverCurrentLocation);
                                }
                            }
                            if (driverInitialLocation) {
                                initialLocation = new google.maps.LatLng(driverInitialLocation.lat, driverInitialLocation.lng);
                                if (initialMarker != null) {
                                    initialMarker.setMap(map);
                                    initialMarker.setPosition(driverInitialLocation);
                                }
                            }

                            if (map == null) {
                                mapOptions = {
                                    center: driverCurrentLocation != null ? driverCurrentLocation : passengerLocation,
                                    zoom: 15,
                                    mapTypeId: google.maps.MapTypeId.ROADMAP
                                };
                                map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
                            }

                            if (passengerLocation != null && passengerMarker == null) {
                                passengerMarker = new google.maps.Marker({
                                    position: passengerLocation,
                                    map: map,
                                    icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=home|FFFF00",
                                    title: 'Pickup'
                                });
                            }
                            if (initialLocation != null && initialMarker == null) {
                                initialMarker = new google.maps.Marker({
                                    position: driverInitialLocation,
                                    map: map,
                                    icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=bus|FFFF00",
                                    title: 'Initial'
                                });
                            }

                            if (driverLocation != null && driverMarker == null) {
                                driverMarker = new google.maps.Marker({
                                    position: driverCurrentLocation,
                                    map: map,
                                    icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=taxi|FFFF00",
                                    title: 'Driver'
                                });
                            }
                            if (destinationLocation != null && destinationMarker == null) {
                                destinationMarker = new google.maps.Marker({
                                    position: dropoffLocation,
                                    map: map,
                                    icon: "http://chart.apis.google.com/chart?chst=d_map_pin_icon&chld=cafe|FFFF00",
                                    title: 'Destination'
                                });
                            }


                            if (driverLocation != null && pickupLocation != null && dropoffLocation != null) {

                                var routes = [];
                                switch (trip.status) {
                                    case "Enroute":
                                        routes = [{ origin: initialLocation, destination: driverCurrentLocation }];
                                        break;
                                    case "PickedUp":
                                        routes = [{ origin: initialLocation, destination: passengerLocation }, { origin: passengerLocation, destination: driverCurrentLocation }];
                                        break;
                                    case "Complete":
                                        routes = [{ origin: initialLocation, destination: passengerLocation }, { origin: passengerLocation, destination: destinationLocation }];
                                        break;
                                }

                                var rendererOptions = {
                                    preserveViewport: true,
                                    suppressMarkers: true,
                                    polylineOptions: {
                                        strokeColor: "#8B0000",
                                        strokeOpacity: 0.8,
                                        strokeWeight: 5
                                    },
                                };

                                var rendererOptions2 = {
                                    preserveViewport: true,
                                    suppressMarkers: true,
                                    polylineOptions: {
                                        strokeColor: "#008000",
                                        strokeOpacity: 0.8,
                                        strokeWeight: 5
                                    },
                                };
                                var directionsService = new google.maps.DirectionsService();
                                var directionsService2 = new google.maps.DirectionsService();

                                var boleanFirst = true;

                                if (directionsDisplay != null) {
                                    directionsDisplay.setMap(null);
                                    directionsDisplay = null;
                                }
                                if (directionsDisplay2 != null) {
                                    directionsDisplay2.setMap(null);
                                    directionsDisplay2 = null;
                                }

                                routes.forEach(function (route) {
                                    var request = {
                                        origin: route.origin,
                                        destination: route.destination,
                                        travelMode: google.maps.TravelMode.DRIVING
                                    };

                                    if (boleanFirst) {

                                        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
                                        directionsDisplay.setMap(map);
                                    }
                                    else {
                                        directionsDisplay2 = new google.maps.DirectionsRenderer(rendererOptions2);
                                        directionsDisplay2.setMap(map);
                                    }

                                    if (boleanFirst) {
                                        directionsService.route(request, function (result, status) {
                                            console.log(result);
                                            if (status == google.maps.DirectionsStatus.OK) {
                                                directionsDisplay.setDirections(result);
                                            }
                                        });
                                        boleanFirst = false;
                                    } else {
                                        directionsService2.route(request, function (result, status) {
                                            console.log(result);
                                            if (status == google.maps.DirectionsStatus.OK) {
                                                directionsDisplay2.setDirections(result);
                                            }
                                        });
                                    }
                                });
                            }
                            map.setCenter(driverCurrentLocation != null ? driverCurrentLocation : passengerLocation);
                        }
                    }
                }
            }

            function clearTripInfo() {
                $("#selectedTripPassengerName").hide().html('').fadeIn();
                $("#selectedTripPickupTime").hide().html('').fadeIn();
                $("#selectedTripPickupLocation").hide().html('').fadeIn();
                $("#selectedTripStatus").hide().html('').fadeIn();
                $("#selectedTripETA").hide().html('').fadeIn();
                $("#selectedTripFare").hide().html('').fadeIn();
                $("#selectedTripDropoffLocation").hide().html('').fadeIn();
                $("#selectedTripDriverName").hide().html('').fadeIn();
                $("#selectedTripDriverLocation").hide().html('').fadeIn();
                $("#selectedTripOriginatingPartner").hide().html('').fadeIn();
                $("#selectedTripServicingPartner").hide().html('').fadeIn();

                if (passengerMarker != null) {
                    passengerMarker.setMap(null);
                }
                if (driverMarker != null) {
                    driverMarker.setMap(null);
                }
                if (destinationMarker != null) {
                    destinationMarker.setMap(null);
                }
                if (initialMarker != null) {
                    initialMarker.setMap(null);
                }
                
                driverPreviousLocation = null;

            }

            function clearLogs() {
                currentTripLogs = [];
                $("#triplogs_logs").html('');
            }

            var updatingTripLog = false;
            var updatingTripLogId = "";
            function updateTripLog() {
                var tripId = $(".activeTrip").find("#tripId").val();
                if (!tripId) tripId = 'All';
                if (!updatingTripLog) {
                    updatingTripLog = true;
                    updatingTripLogId = tripId;
                    tripId = tripId == 'All' ? '' : '?tripid=' + tripId;
                    $.get(baseUrl + 'log' + tripId, function (data) {
                        if (data.result == "OK") {
                            var logs = [];
                            var initLog = false;

                            //filter only new logs
                            if (currentTripLogs.length > 0) {
                                var last = currentTripLogs[currentTripLogs.length - 1].time;
                                for (j = 0; j < data.logList.length; j++) {
                                    var log = data.logList[j];
                                    if (Date.parse(log.time) > Date.parse(last)) {
                                        logs.push(log);
                                        currentTripLogs.push(log);
                                    }
                                }
                            } else {
                                initLog = true;
                                logs = data.logList;
                                currentTripLogs = data.logList;
                                $("#triplogs_logs").html('');
                            }

                            if (logs.length > 0) {
                                var logString = '';
                                if (initLog) {
                                    logString = '<ul class="request_list tree">';
                                }
                                for (j = logs.length - 1; j >= 0; j--) {
                                    var log = logs[j];
                                    if (log.messages.length > 0) {
                                        logString += '<li class="request_block"> <span class="handle collapsed"></span>';
                                        logString += log.time + " | " + log.messages[0].text;
                                        logString += '<ul style="display: none;">';
                                        if (log.request) {
                                            logString += '<li><span class="handle collapsed"></span> Request <ul style="display: none;"><li><pre><code class="language-javascript">' + FormatJSON(JSON.parse(log.request)) + '</code></pre></li></ul></li>';
                                        }
                                        if (log.messages.length > 1) {
                                            for (i = 1; i < log.messages.length; i++) {
                                                logString += '<li style="padding-left:' + log.messages[i].indent + 'px">';

                                                if (log.messages[i].json) {
                                                    logString += '<span class="handle collapsed"></span>';
                                                }

                                                logString += '<p>' + log.messages[i].text + '</p>';

                                                if (log.messages[i].json) {
                                                    var hasResponse = ((i + 1) < (log.messages.length - 1)) && log.messages[i + 1].text.indexOf('Response') != -1 && log.messages[(i + 1)].json;
                                                    var title = hasResponse ? 'Request: \n' : '';
                                                    logString += '<ul style="display: none;"><li><pre><code class="language-javascript">' + title + FormatJSON(JSON.parse(log.messages[i].json));
                                                    if (hasResponse) {
                                                        i++;
                                                        logString += '\n\nResponse: \n' + FormatJSON(JSON.parse(log.messages[i].json));
                                                    }
                                                    logString += '</code></pre></li></ul>';
                                                }
                                                logString += '</li>';
                                            }
                                        }
                                        logString += '</ul></li>';
                                    }
                                }
                                if (initLog) {
                                    logString += '</ul>';
                                    $("#triplogs_logs").append(logString);
                                } else {
                                    $('.request_list').prepend(logString);
                                }

                                $(".tree li:has(ul)").children(":first-child").off('click').on('click', function () {
                                    $(this).toggleClass("collapsed expanded").siblings("ul").fadeToggle();
                                });

                                Prism.highlightAll();
                            }
                        }
                        updatingTripLog = false;
                        $("#updatingTripLog").fadeOut();
                    }).error(function () {
                        updatingTripLog = false;
                        $("#updatingTripLog").fadeOut();
                    });
                }
            }

            var updatingCharts = false;
            function updateCharts() {
                if (!updatingCharts && activeTripsChart != null) {
                    updatingCharts = true;
                    $.get(baseUrl + 'stats', function (data) {
                        if (data.result == "OK") {
                            stats.series[2].data[3].update(data.exceptionsAllTime, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[2].data[2].update(data.cancelsAllTime, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[2].data[1].update(data.rejectsAllTime, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[2].data[0].update(data.tripsAllTime, false, {
                                duration: 1500,
                                easing: 'swing'
                            });

                            stats.series[1].data[3].update(data.exceptionsLast24Hrs, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[1].data[2].update(data.cancelsLast24Hrs, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[1].data[1].update(data.rejectsLast24Hrs, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[1].data[0].update(data.tripsLast24Hrs, false, {
                                duration: 1500,
                                easing: 'swing'
                            });

                            stats.series[0].data[3].update(data.exceptionsLastHour, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[0].data[2].update(data.cancelsLastHour, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[0].data[1].update(data.rejectsLastHour, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.series[0].data[0].update(data.tripsLastHour, false, {
                                duration: 1500,
                                easing: 'swing'
                            });
                            stats.redraw();
                            updateCounters(data);
                        }
                        updatingCharts = false;
                    }).error(function () {
                        updatingCharts = false;
                    });
                }
            }

            function updateCounters(data) {
                updateCounter("requestsLastHour", data.requestsLastHour);
                updateCounter("requestsLast24Hrs", data.requestsLast24Hrs);
                updateCounter("requestsAllTime", Math.ceil(data.requestsAllTime));
                updateCounter("distanceLastHour", data.distanceLastHour);
                updateCounter("distanceLast24Hrs", data.distanceLast24Hrs);
                updateCounter("distanceAllTime", Math.ceil(data.distanceAllTime));
                updateCounter("fareLastHour", data.fareLastHour);
                updateCounter("fareLast24Hrs", data.fareLast24Hrs);
                updateCounter("fareAllTime", Math.ceil(data.fareAllTime));
            }

            function updateCounter(id, number) {
                if (counters[id] == 0 && number == 0) {
                    $("#" + id).flipCounter("setNumber", 0);
                } else {
                    $("#" + id).flipCounter(
                        "startAnimation", // scroll counter from the current number to the specified number
                        {
                            number: counters[id], // the number we want to scroll from
                            end_number: number, // the number we want the counter to scroll to
                            easing: jQuery.easing.easeOutCubic, // this easing function to apply to the scroll.
                            duration: 2000 // number of ms animation should take to complete
                        }
                    );
                }
                var x = counters;
                counters[id] = number;
                x = counters;
            }

            setInterval(function () {
                updateCharts();
                updateTrips();
                updateSelectedTrip();
                updateTripLog();
            }, 10000);

            //JSON formatter
            function RealTypeOf(v) {
                if (typeof (v) == "object") {
                    if (v === null) return "null";
                    if (v.constructor == (new Array).constructor) return "array";
                    if (v.constructor == (new Date).constructor) return "date";
                    if (v.constructor == (new RegExp).constructor) return "regex";
                    return "object";
                }
                return typeof (v);
            }

            function FormatJSON(oData, sIndent) {
                if (arguments.length < 2) {
                    var sIndent = "";
                }
                var sIndentStyle = "    ";
                var sDataType = RealTypeOf(oData);

                // open object
                if (sDataType == "array") {
                    if (oData.length == 0) {
                        return "[]";
                    }
                    var sHTML = "[";
                } else {
                    var iCount = 0;
                    $.each(oData, function () {
                        iCount++;
                        return;
                    });
                    if (iCount == 0) { // object is empty
                        return "{}";
                    }
                    var sHTML = "{";
                }

                // loop through items
                var iCount = 0;
                $.each(oData, function (sKey, vValue) {
                    if (iCount > 0) {
                        sHTML += ",";
                    }
                    if (sDataType == "array") {
                        sHTML += ("\n" + sIndent + sIndentStyle);
                    } else {
                        sHTML += ("\n" + sIndent + sIndentStyle + "\"" + sKey + "\"" + ": ");
                    }

                    // display relevant data type
                    switch (RealTypeOf(vValue)) {
                        case "array":
                        case "object":
                            sHTML += FormatJSON(vValue, (sIndent + sIndentStyle));
                            break;
                        case "boolean":
                        case "number":
                            sHTML += vValue.toString();
                            break;
                        case "null":
                            sHTML += "null";
                            break;
                        case "string":
                            sHTML += ("\"" + vValue + "\"");
                            break;
                        default:
                            sHTML += ("TYPEOF: " + typeof (vValue));
                    }

                    // loop
                    iCount++;
                });

                // close object
                if (sDataType == "array") {
                    sHTML += ("\n" + sIndent + "]");
                } else {
                    sHTML += ("\n" + sIndent + "}");
                }

                // return
                return sHTML;
            }

        });
    </script>

</body>
</html>
