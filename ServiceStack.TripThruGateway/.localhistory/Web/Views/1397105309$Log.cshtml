@using System.CodeDom
@using System.Text
@using ServiceStack.Common
@inherits ServiceStack.Razor.ViewPage<GatewayService.LogResponse>


<html>

    <head>
        <title>Log</title>
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
        <link href="Scripts/prism.css" rel="stylesheet" />
        <script type="text/javascript" src="Scripts/prism.js"></script>
    </head>


    <body>

        <style>
            @@font-face {
                font-family: "Arimo";
                font-style: normal;
                font-weight: 400;
                src: local("Arimo"), url("http://themes.googleusercontent.com/static/fonts/arimo/v6/wZLYhRRxZWGToTRP78bqJQ.woff") format("woff");
            }

            @@font-face {
                font-family: "Arimo";
                font-style: normal;
                font-weight: 700;
                src: local("Arimo Bold"), local("Arimo-Bold"), url("http://themes.googleusercontent.com/static/fonts/arimo/v6/UnXpojilM3XslYxUnWuVe_esZW2xOQ-xsNqO47m55DA.woff") format("woff");
            }

            @@font-face {
                font-family: "Arimo";
                font-style: italic;
                font-weight: 400;
                src: local("Arimo Italic"), local("Arimo-Italic"), url("http://themes.googleusercontent.com/static/fonts/arimo/v6/8ezAIdgyp-Cm5_X7mWzP_g.woff") format("woff");
            }

            @@font-face {
                font-family: "Arimo";
                font-style: italic;
                font-weight: 700;
                src: local("Arimo Bold Italic"), local("Arimo-BoldItalic"), url("http://themes.googleusercontent.com/static/fonts/arimo/v6/_K7sg-ijHdmkwPzV9FiqaBsxEYwM7FgeyaSgU71cLG0.woff") format("woff");
            }

            body {
                font-family: 'Open Sans',sans-serif;
                background: #f8f8f8;
                color: #525252;
                font-weight: 300;
                font-size: 16px;
            }

            h1 {
                font-weight: 300;
                color: #525252;
                margin: 0 0 20px 0;
            }

            h2 {
                font-weight: 100;
                color: #525252;
                margin: 0 0 20px 0;
            }

            /*HEADER STYLE*/
            .logo {
                float: left;
                margin: 12px 55px 11px 11px;
                font-size: 40px;
                color: #0099ff;
                font-family: 'Arimo';
                letter-spacing: 0;
                line-height: 1.3;
                font-weight: bold;
                font-style: italic;
            }

            .logo a {
                /*
            float: left;
                */
            }

            #head_nav {
                float: left;
                margin: 31px 0px;
                padding: 0px;
                list-style: none;
            }

            #head_nav li {
                float: left;
                margin: 0px;
                padding: 0px 10px;
            }

            #head_nav li.last {
                border-right: none;
            }

            #head_nav li a {
                float: left;
                text-decoration: none;
                color: #727272;
            }

            #head_nav li a:hover, #head_nav li a.active {
                color: #0087bc;
            }

            #header_out {
                width: 100%;
                height: 72px;
                background: #FFF;
                font-size: 0.85em;
            }

            #header {
                width: 960px;
                height: 70px;
                margin: 0px auto;
            }
            /*HEADER STYLE*/

            .box_container {
                width: 960px;
                margin: 0px auto;
                margin-top: 10px;
                word-wrap: break-word;
            }

            ul {
                list-style-type: none;
                padding: 0;
                margin: 0;
                word-wrap: break-word;
            }

            li {
                font-weight: 300;
                padding-left: 1.5em;
                word-wrap: break-word;
            }

            .request_list {
                word-wrap: break-word;
            }

            .request_block {
                padding-left: 0em;
                border: 1px solid #eee;
                background: white;
                font-weight: bold;
                margin-top: 1.0em;
                margin-bottom: 1.0em;
                font-size: 14px;
                word-wrap: break-word;
            }

            .handle {
                background: transparent url(/images/books/jquery-1-7/spacer.png);
                background-repeat: no-repeat;
                background-position: center bottom;
                display: block;
                float: left;
                width: 10px;
                height: 11px;
            }

            .collapsed {
                background: transparent url(/content/images/arrow_collapsed.gif);
                background-repeat: no-repeat;
                background-position: center;
                cursor: pointer;
            }

            .expanded {
                background: transparent url(/content/images/arrow_expanded.gif);
                background-repeat: no-repeat;
                background-position: center;
                cursor: pointer;
            }

            pre {
                width: 97%;
                font-size: 13px;
                border: 1px solid #DEDEDE;
                background: #fff !important;
            }

            code {
                background: #fff;
            }
        </style>

        <div id="header_out">
            <div id="header">
                <div class="logo">
                    <!--<img src="content/images/Logo.png" border="0" />-->
                    TripThru
                </div>
                <ul id="head_nav">
                    <li><a href="stats">Stats</a></li>
                    <li><a class="active" href="#">Log</a></li>
                </ul>
            </div>
        </div>

        <pre><code id=planets></code></pre>

        <div class="box_container">
            @if (Model.LogList.Count == 0)
            {
                <h2 style="margin-top: 30px;">No recent log entries</h2>
            }
            <ul class="request_list tree">
                @for (var j = Model.LogList.Count - 1; j >= 0; j--)
                {
                    var entry = Model.LogList[j];
                    if (entry.Messages.Count > 0)
                    {
                        <li class="request_block">
                            @entry.Time.ToString() | @entry.Messages.First().Text
                            <ul>
                                <br />
                                @if (!entry.Request.IsNullOrEmpty())
                                {
                                    <li>
                                        <span class="handle collapsed"></span>
                                        Request
                                        <ul style="display: none;">
                                            <li><pre style=" word-wrap: break-word;" class="prettyprint language-java"><code class="language-javascript">@PrettyPrint(entry.Request)</code></pre></li>
                                        </ul>
                                    </li>
                                }
                                @if (entry.Messages.Count > 1)
                                {
                                    for (int i = 1; i < entry.Messages.Count; i++)
                                    {
                                        var log = entry.Messages.ElementAt(i);
                                        <li style="padding-left: @log.Indent.ToString()px;">
                                            @if (log.Json != null)
                                            {
                                                <span class="handle collapsed"></span>
                                            }

                                            <p>@PrettyPrint(log.Text)</p>

                                            @if (log.Json != null)
                                            {
                                                <ul style="display: none;">
                                                    <li>
                                                        <pre><code class="language-javascript">Request: @PrettyPrint(log.Json);
                                    @if (i + 1 < entry.Messages.Count - 1 && entry.Messages.ElementAt(i + 1).Text.Contains("   Response") && entry.Messages.ElementAt(i + 1).Json != null)
                                    {
                                        i++;
                                        <span>Response: </span>@PrettyPrint(entry.Messages.ElementAt(i).Json);

                                    }
                                    </code></pre>
                                    
                                                    </li>
                                                </ul>
                                            }
                                        </li>
                                    }
                                }
                            </ul>
                        </li>
                    }
                }
            </ul>
        </div>
        <script>
            $(document).ready(function () {
                $(".tree li:has(ul)").children(":first-child").click(function () {
                    $(this).toggleClass("collapsed expanded").siblings("ul").fadeToggle();
                });
                Prism.highlightAll();
            });
        </script>

    </body>
</html>
@functions{

    public static string Indent = "    ";

    public static void AppendIndent(StringBuilder sb, int count)
    {
        for (; count > 0; --count) sb.Append(Indent);
    }

    public static bool IsEscaped(StringBuilder sb, int index)
    {
        bool escaped = false;
        while (index > 0 && sb[--index] == '\\') escaped = !escaped;
        return escaped;
    }

    public static string PrettyPrint(string input)
    {
        var output = new StringBuilder(input.Length * 2);
        char? quote = null;
        int depth = 0;

        for (int i = 0; i < input.Length; ++i)
        {
            char ch = input[i];

            switch (ch)
            {
                case '{':
                case '[':
                    output.Append(ch);
                    if (!quote.HasValue)
                    {
                        output.AppendLine();
                        AppendIndent(output, ++depth);
                    }
                    break;
                case '}':
                case ']':
                    if (quote.HasValue)
                        output.Append(ch);
                    else
                    {
                        output.AppendLine();
                        AppendIndent(output, --depth);
                        output.Append(ch);
                    }
                    break;
                case '"':
                case '\'':
                    output.Append(ch);
                    if (quote.HasValue)
                    {
                        if (!IsEscaped(output, i))
                            quote = null;
                    }
                    else quote = ch;
                    break;
                case ',':
                    output.Append(ch);
                    if (!quote.HasValue)
                    {
                        output.AppendLine();
                        AppendIndent(output, depth);
                    }
                    break;
                case ':':
                    if (quote.HasValue) output.Append(ch);
                    else output.Append(" : ");
                    break;
                default:
                    if (quote.HasValue || !char.IsWhiteSpace(ch))
                        output.Append(ch);
                    break;
            }
        }

        return output.ToString();
    }

}